// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: proto/vector.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)




const _ = grpc.SupportPackageIsVersion9

const (
	VectorService_SumVectors_FullMethodName = "/vector.VectorService/SumVectors"
	VectorService_GetStats_FullMethodName   = "/vector.VectorService/GetStats"
)





// servicio para operaciones con vectores
type VectorServiceClient interface {
	
	SumVectors(ctx context.Context, in *VectorRequest, opts ...grpc.CallOption) (*VectorResponse, error)
	
	GetStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
}

type vectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVectorServiceClient(cc grpc.ClientConnInterface) VectorServiceClient {
	return &vectorServiceClient{cc}
}

func (c *vectorServiceClient) SumVectors(ctx context.Context, in *VectorRequest, opts ...grpc.CallOption) (*VectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VectorResponse)
	err := c.cc.Invoke(ctx, VectorService_SumVectors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorServiceClient) GetStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, VectorService_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}






type VectorServiceServer interface {

	SumVectors(context.Context, *VectorRequest) (*VectorResponse, error)

	GetStats(context.Context, *StatsRequest) (*StatsResponse, error)
	mustEmbedUnimplementedVectorServiceServer()
}






type UnimplementedVectorServiceServer struct{}

func (UnimplementedVectorServiceServer) SumVectors(context.Context, *VectorRequest) (*VectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SumVectors not implemented")
}
func (UnimplementedVectorServiceServer) GetStats(context.Context, *StatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedVectorServiceServer) mustEmbedUnimplementedVectorServiceServer() {}
func (UnimplementedVectorServiceServer) testEmbeddedByValue()                       {}

type UnsafeVectorServiceServer interface {
	mustEmbedUnimplementedVectorServiceServer()
}

func RegisterVectorServiceServer(s grpc.ServiceRegistrar, srv VectorServiceServer) {
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VectorService_ServiceDesc, srv)
}

func _VectorService_SumVectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorServiceServer).SumVectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VectorService_SumVectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorServiceServer).SumVectors(ctx, req.(*VectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VectorService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VectorService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorServiceServer).GetStats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var VectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vector.VectorService",
	HandlerType: (*VectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SumVectors",
			Handler:    _VectorService_SumVectors_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _VectorService_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/vector.proto",
}
